#!/bin/bash
# Set up a newly installed fedora machine.  Might work for centos/rhel as well.
#set -x
[ x"$1" = x ] && \
    read -p "desktop, or laptop? (default: laptop) " some_top || \
    some_top=$1

case $some_top in
    [Dd]esk*) usage_type=desk;;
    [Ll]ap*) usage_type=lap;;
    "") usage_type=lap;;
    *) echo "Input wasn't desktop or laptop."
        exit 1
    ;;
esac

# Find repo root.
SCRIPTPATH=$( cd $(dirname $0) ; pwd -P )
repo=${SCRIPTPATH%/scripts*}

# Use /tmp/setup to avoid wearing out the flash drive
setup=/tmp/setup
mkdir $setup
cd $setup

go_or_die() {
    echo "error: $@"
    read -p "^c to quit, or Enter to continue."
}

# If this is fedora
if [ /etc/redhat-release ]; then

    # Check for software and helper scripts.
    echo "Checking Repos..."
    repolist="$(yum -q repolist)"
    # Adds freetype patches repo
    case $repolist in
        *infinality*) : ;;
        *) rpm -Uvh "http://www.infinality.net/fedora/linux/infinality-repo-1.0-1.noarch.rpm"
    esac
    # for flash.
    case $repolist in
        *[Aa]dobe*) : ;;
        *) rpm -Uvh "http://linuxdownload.adobe.com/adobe-release/adobe-release-x86_64-1.0-1.noarch.rpm"
        rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-adobe-linux
        ;;
    esac

    # RPMFusion
    F_REL=$(awk '{ print $3; }'</etc/redhat-release)
    case $repolist in
        *rpmfusion*) : ;;
        *) rpm --import "http://rpmfusion.org/keys?action=AttachFile&do=get&target=RPM-GPG-KEY-rpmfusion-free-fedora-$F_REL" \
                        "http://rpmfusion.org/keys?action=AttachFile&do=get&target=RPM-GPG-KEY-rpmfusion-nonfree-fedora-$F_REL"
        rpm -ivh "http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm" \
                    "http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm"
        ;;
    esac

    # Add packages here so I don't have to remember them. Do yum first so others
    # are faster
    yum_plugins=( yum-plugin-fastestmirror
            yum-plugin-show-leaves
            yum-utils
    )

    # Use this for yum to reduce output
    yum="yum -q -y --errorlevel=0 --rpmverbosity=error"

    echo "Checking Yum plugins..."
    rpm -qi ${yum_plugins[@]} &>/dev/null || \
        ${yum} install "${yum_plugins[@]}" || \
        go_or_die "Yum plugin install failed."

# Otherwise, assume ubuntu
else

    # Add gnome ppa
    add-apt-repository ppa:gnome3-team/gnome3
fi

ARCH=$(uname -m)

# Just write a file with the package names we need for each distro
system_pkgs=( aircrack-ng.$ARCH
        cabextract.$ARCH
        git.$ARCH
        vim-X11.$ARCH
        vim-common.$ARCH
        vim-filesystem.$ARCH
        vim-enhanced.$ARCH
        vim-minimal.$ARCH
        ncurses-term.$ARCH
        nmap.$ARCH
        r8168-dkms

        rdesktop.$ARCH
        rfkill.$ARCH
        patch.$ARCH
        python-pip.noarch
        screen.$ARCH
        source-highlight.$ARCH
        subversion.$ARCH
        subversion-gnome.$ARCH
        sysstat.$ARCH
        wireshark.$ARCH
        )

# Fedora only
#        gnome-shell-extension-auto-move-windows.noarch
#        gnome-shell-extension-pidgin.$ARCH
#        gnome-shell-extension-alternate-tab.noarch
#        gnome-shell-extension-remove-accessibility-icon.noarch
#        gnome-tweak-tool.noarch
#        itcl.$ARCH

gui_pkgs=( dconf-editor.$ARCH
        google-droid-sans-fonts.noarch
        libreoffice-core.$ARCH
        libreoffice-calc.$ARCH
        libreoffice-writer.$ARCH
        pidgin.$ARCH
        t1lib.$ARCH
        thunderbird.$ARCH
        xchat.$ARCH
        )

#amanda_pkgs=( gcc.$ARCH
#        automake.noarch
#        autoconf.noarch
#        flex.$ARCH
#        glib2-devel.$ARCH
#        libcurl-devel.$ARCH
#        libtool.$ARCH
#        readline-devel.$ARCH
#        )

echo "$system_pkgs
$gui_pkgs" > pkgs_to_install.list

echo "Find missing packages..."
# Set operations in bash!
# Add arch suffix to make sure 32bit packages match.
# http://www.catonmat.net/blog/set-operations-in-unix-shell/
#missing=( $(comm -23 \
#    <( printf "%s\n" ${system_pkgs[@]} ${system_pkgs_i686[@]} ${gui_pkgs[@]} ${amanda_pkgs[@]} | sort ) \
#    <( rpm -qa --queryformat "%{NAME}.%{ARCH}\n" | sort )\
#) )

#if [ "${#missing[@]}" -gt 0 ]; then
#    echo "Installing missing packages: ${missing[@]}"
#    # Now we have to strip that pesky suffix again.
#    ${yum} install "${missing[@]%.$ARCH}" || \
#    go_or_die "Missing package installation failed. Missing = ${missing[@]}"
#fi

# Two extra font packages: microsoft and apple
echo 'Check for M$ft fonts...'
ms_fonts=webcore-fonts-vista
#rpm -qa $ms_fonts > /dev/null || \
#    ${yum} install "http://avi.alkalay.net/software/webcore-fonts/$ms_fonts-3.0-1.noarch.rpm"

#echo "Check for Apple fonts..."
#if [ /tmp/macfonts.tar.gz ]; then
#    # Untar, update cache, be happy.
#    [ ! -d /usr/share/fonts/macfonts ] && \
#        tar -C /usr/share/fonts -zxf /tmp/macfonts.tar.gz && \
#        fc-cache -v -s
#else
#    echo "Check around these urls for macfonts.tar.gz:
#    http://www.webupd8.org/2010/06/how-to-install-apple-mac-osx-fonts-in.html
#    And the shady mirrors:
#    http://www.multiupload.nl/ZQ5V42473G
#    http://freestorage.ro/2tvmlx1ydcr0/macfonts.tar.gz.html"
#fi

# Packages I don't need or want.
remove=( b43-fwcutter
            b43-openfwwf
            aic94xx-firmware
            btrfs-progs
            eekboard*
            anaconda
            fcoe-utils
            *chewing*
            *hangul*
            *pinyin*
            ar9170-firmware
            iwl[1-5]*-firmware
            ql2500-firmware
            ivtv-firmware
            ipw*-firmware
            libertas-usb8388-firmware
            zd1211-firmware
            ibus*
            im*
            vino
)
remove_fonts=( cjkuni-uming-fonts
            jomolhari-*
            khmeros-*
            lklug*
            lohit-*fonts
            nhn-nanum*
            paktype-*-fonts
            paratype-*fonts
            sil-*fonts
            smc-*fonts*
            thai-scalable*
            vlgothic*
            wqy-*
)

echo "$remove
$remove_fonts" > pkgs_to_remove.list
## Just query rpm 'cause these arrays have globs to be expanded.
#bloat=( $(rpm -qa --qf "%{NAME}\n" "${remove[@]}" "${remove_fonts[@]}" | grep -v "not installed") )
#if [ "${#bloat[@]}" -gt 0 ]; then
#    echo "Erasing bloat: ${bloat[@]}"
#    ${yum} erase "${bloat[@]}" || \
#    go_or_die "Error erasing bloat: ${bloat[@]}"
#fi
#
#if [ "$usage_type" == "lap" ] && ! rpm -qi laptop-mode-tools &>/dev/null ; then
#    echo "Installing laptop-mode-tools..."
#    # Download, build and install laptop-mode-tools.  Maybe check for a new one?
#    mkdir rpmbuild
#    l_m_t=laptop-mode-tools
#    v=1.62
#    [ -f ./$l_m_t ] || wget "http://samwel.tk/laptop_mode/tools/downloads/${l_m_t}_${v}.tar.gz"
#    # Make sure not to build on flash-drive!
#    rpmbuild -tb ${l_m_t}_${v}.tar.gz --define "_topdir $PWD/rpmbuild" && \
#        ${yum} install $PWD/rpmbuild/RPMS/noarch/${l_m_t}-${v}*.rpm || \
#        go_or_die "laptop-mode-tools didn't seem to build."
#    systemctl enable laptop-mode.service
#    # Defaults are better than nothing
#    systemctl start laptop-mode.service
#    echo "If this is a clean install of laptop-mode-tools, adjust the configs:
#        /etc/laptop-mode/laptop-mode.conf
#        /etc/laptop-mode/conf.d/bluetooth.conf
#        /etc/laptop-mode/conf.d/lcd-brightness.conf
#        /etc/laptop-mode/conf.d/video-out.conf
#    and any other that look interesting."
#fi

# Modify the default theme (dangerous?  sure!  nicer too.)
# Thanks to: http://simko.web.cern.ch/simko/gnome.html
# Still works Gnome Shell 3.10
echo "Slimming title bar and remove for maximized windows..."
t_dir=/usr/share/themes/Adwaita/metacity-1
cp $t_dir/metacity-theme-3.xml $t_dir/backup_metacity-theme-3.xml
sed -i '/title_vertical_pad/s|value="[0-9]\{1,2\}"|value="1"|g' \
       $t_dir/metacity-theme-3.xml
sed -i -r '/has_title="false"/! { s|(<frame_geometry name="max")|\1 has_title="false"| }' \
       $t_dir/metacity-theme-3.xml

## Install files in /etc
# Copy synaptics tweaks
cp -f $repo/etc/20-synaptics.conf /etc/X11/xorg.conf.d

# Allow toggling wifi on samsung 900x4d
cp -f $repo/etc/rfkill-toggle /etc/acpi/actions/rfkill-toggle


disable_svcs() {
    # Takes a list of services to disable
    # Disable in a loop, because failure messages are not clear. In
    # addition, is-enabled is not reliable
    for svc in $@; do
        systemctl stop "${svc}"
        systemctl disable --no-reload "${svc}"
        wanted_by=$(find /usr/lib/systemd -wholename "*.wants/${svc}*")
        if [ "$wanted_by" ]; then
            echo "${svc} still wanted by ${wanted_by}"
            read -p "Shall I mask it? (y/N)"
            case $REPLY in
                [Yy]*) systemctl mask ${svc};;
                [Nn]*) : ;;
            esac
        fi
    done
    # Reload at the end only.
    systemctl daemon-reload
}

    #abrt-ccpp
    #abrt-xorg.service
unused_services=( auditd.service
    avahi-daemon.service
    colord-sane.service
    livesys.service
    livesys-late.service
    mcelog.service
    postfix.service
    sendmail.service
    spice-vdagentd.service
    tcsd.service
)
disable_svcs "${unused_services[@]}"

storage_svc=( fedora-storage-init-late.service
    fedora-storage-init.service
    fedora-wait-storage.service
    lvm2-monitor.service
    mdmonitor.service
    mdmonitor-takeover.service
    multipathd.service
    dm-event.socket
)

# For the storage service, make sure there are no disks that need these!
has_md=false
# Is this difinitive?
for d in /dev/md*; do
    [ -b $d ] && has_md=true
done

has_lvm=false
# If dmraid returns something, we need lvm.
dmraid -s -c -i && has_lvm=true
# If lvs has some output, we need lvm.
[ "$(lvs --noheadings 2>/dev/null)" ] && has_lvm=true

# Now only add unused services to storage_svc_to_disable
for svc in ${storage_svc[@]}; do
    case $svc in
        mdmon*) [ "$has_md" = "false" ] && \
            storage_svc_to_disable=( ${storage_svc_to_disable[@]} $svc )
            ;;
        lvm*|dm*) [ "$has_lvm" = "false" ] && \
            storage_svc_to_disable=( ${storage_svc_to_disable[@]} $svc )
            ;;
        # If neither md or lvm are in use...
        fedora*) [ "$has_md" = "false" ] && [ "$has_lvm" = "false" ] && \
            storage_svc_to_disable=( ${storage_svc_to_disable[@]} $svc )
            ;;
    esac
done
if [ "${storage_svc_to_disable[*]}" ]; then
    echo "Disabling: ${storage_svc_to_disable[@]}"
    read -p "ctrl-c to quit or Enter to disable"
    disable_svcs "${storage_svc_to_disable[@]}"
fi

# Do the upstart fixes:


# TODO:

# root's bashrc: terminfo checks and graceful fallback for linux/solaris
# for terminfo:  screen-256color, xterm-256color, xterm-color, xterm, vt100

# x86_energy_perf_policy(8)  ??

# Check what "ACPI _OSC support notification failed" and
# "PCIe ASPM disabled" mean.
#

# Cleanup.  TODO: use a trap.
cd /
rm -rf $setup
